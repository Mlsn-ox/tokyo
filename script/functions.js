/**
 * Initialise carte Leaflet centr√©e sur les coordonn√©es rentr√©es
 * @param {number} lat - Latitude
 * @param {number} lng - Longitude
 * @returns {L.Map} - L'objet carte Leaflet initialis√©
 */
export function mapping(lat, lng) {
  const map = L.map("map").setView([lat, lng], 12);
  let layerGroup = L.layerGroup();
  const street = L.tileLayer(
    "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
    {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      maxZoom: 19,
    }
  ).addTo(map);
  const sat = L.tileLayer(
    "https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v12/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWxzbiIsImEiOiJjbTZpMjR6dzMwMnRmMmlxc2NsdGNpdzBtIn0.ODgHxRTgvTEgXe9jH7r88A",
    {
      attribution: '&copy; <a href="https://www.mapbox.com/">Mapbox</a>',
      maxZoom: 19,
    }
  );
  const baseMaps = {
    OpenStreet: street,
    Satellite: sat,
  };
  L.control.layers(baseMaps).addTo(map);
  L.control.scale().addTo(map);
  return map;
}

/**
 * √âchappe les caract√®res HTML sp√©ciaux dans une cha√Æne de caract√®res.
 * @param {any} input - La cha√Æne/nombre √† s√©curiser
 * @returns {string} - La cha√Æne √©chapp√©e, pr√™te √† √™tre inject√©e dans le DOM
 */
export function escapeHTML(input) {
  const str = String(input); // Conversion en cha√Æne au cas o√π
  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

/**
 * Retourne un √©moji en fonction de la cat√©gorie.
 * @param string cat√©gorie
 * @return string √©moji
 */
export function getEmojiCategory(cat) {
  switch (cat) {
    case "gastronomie":
      return "üçú";
    case "loisir":
      return "üé≥";
    case "shopping":
      return "üõç";
    case "panorama":
      return "üì∑";
    default:
      return "üéé";
  }
}
